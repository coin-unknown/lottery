{"version":3,"file":"node.es","sources":["../src/node.ts"],"sourcesContent":["import { TonClient, WalletContractV5R1 } from '@ton/ton';\nimport { Address, toNano, Dictionary } from '@ton/core';\nimport { TON_CLIENT_ENDPOINT, TON_CLIENT_API_KEY, IS_TESTNET } from './constants';\nimport { getFactoryInstance, getLotteryInstance } from './utils/factory';\nimport { mnemonicToPrivateKey } from '@ton/crypto';\n\nexport interface BuyTicketParams {\n  mnemonic: string;\n  roundIdx: number;\n  qty: number;\n  recipient: string;\n  refWallet?: string;\n}\n\n// Инициализация TON клиента\nconst client = new TonClient({\n  endpoint: TON_CLIENT_ENDPOINT,\n  apiKey: TON_CLIENT_API_KEY,\n});\n\n/**\n * Создание кошелька из мнемонической фразы\n * @param mnemonic\n */\nasync function getWalletFromMnemonic(mnemonic: string) {\n  const keyPair = await mnemonicToPrivateKey(mnemonic.split(' '));\n  return {\n    publicKey: keyPair.publicKey,\n    secretKey: keyPair.secretKey,\n  };\n}\n\n/**\n * Восстановление и вывод информации о кошельке\n * @param mnemonic\n */\nasync function restoreWalletV5(mnemonic: string) {\n  const walletKeys = await getWalletFromMnemonic(mnemonic);\n  const walletV5 = WalletContractV5R1.create({\n    publicKey: walletKeys.publicKey,\n    walletId: { networkGlobalId: IS_TESTNET ? -3 : 0 },\n  });\n\n  return { walletV5, walletKeys };\n}\n\n/**\n * Покупка билетов\n * @param params\n */\nexport async function buyTicketsNode(params: BuyTicketParams) {\n  try {\n    const { mnemonic, roundIdx, qty, recipient, refWallet } = params;\n    const { walletV5, walletKeys } = await restoreWalletV5(mnemonic);\n\n    // Получаем инстанс лотереи\n    const factory = await getFactoryInstance();\n    const lotteryAddr = await factory.getLotteryAddress(BigInt(roundIdx));\n    const lottery = await getLotteryInstance(lotteryAddr);\n    const walletBalance = await client.getBalance(walletV5.address);\n    const bigintQty = BigInt(qty);\n    const round = await lottery.getInfo();\n    const cost = (await lottery.getCalculateTotalPriceForBulkTickets(bigintQty)) + toNano('0.004') * BigInt(qty);\n\n    if (round.status !== 0n) {\n      throw new Error('The round is not active');\n    }\n\n    if (walletBalance < cost) {\n      throw new Error(`Insufficient balance to complete the transaction ${walletBalance} ${cost}`);\n    }\n\n    // Создаем словарь билетов\n    const ticketNumbers = Dictionary.empty(Dictionary.Keys.Uint(32), Dictionary.Values.Uint(32));\n    for (let i = 0; i < qty; i++) {\n      const rnd = Math.floor(Math.random() * 1000000) + 1000000;\n      ticketNumbers.set(i, rnd);\n    }\n\n    const provider = client.provider(walletV5.address);\n\n    await lottery.send(\n      walletV5.sender(provider, walletKeys.secretKey),\n      {\n        value: cost,\n      },\n      {\n        $$type: 'BuyTicket',\n        amount: bigintQty,\n        ticketNumbers,\n        recipient: Address.parse(recipient),\n        refWallet: refWallet ? Address.parse(refWallet) : null,\n      }\n    );\n\n    return { success: true };\n  } catch (error: unknown) {\n    return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };\n  }\n}\n"],"names":["client","TonClient","TON_CLIENT_ENDPOINT","TON_CLIENT_API_KEY","getWalletFromMnemonic","mnemonic","keyPair","mnemonicToPrivateKey","restoreWalletV5","walletKeys","WalletContractV5R1","buyTicketsNode","params","roundIdx","qty","recipient","refWallet","walletV5","lotteryAddr","getFactoryInstance","lottery","getLotteryInstance","walletBalance","bigintQty","round","cost","toNano","ticketNumbers","Dictionary","i","rnd","provider","Address","error"],"mappings":";;;;AAeA,MAAMA,IAAS,IAAIC,EAAU;AAAA,EAC3B,UAAUC;AAAA,EACV,QAAQC;AACV,CAAC;AAMD,eAAeC,EAAsBC,GAAkB;AACrD,QAAMC,IAAU,MAAMC,EAAqBF,EAAS,MAAM,GAAG,CAAC;AACvD,SAAA;AAAA,IACL,WAAWC,EAAQ;AAAA,IACnB,WAAWA,EAAQ;AAAA,EACrB;AACF;AAMA,eAAeE,EAAgBH,GAAkB;AACzC,QAAAI,IAAa,MAAML,EAAsBC,CAAQ;AAMhD,SAAA,EAAE,UALQK,EAAmB,OAAO;AAAA,IACzC,WAAWD,EAAW;AAAA,IACtB,UAAU,EAAE,iBAA8B,GAAO;AAAA,EAAA,CAClD,GAEkB,YAAAA,EAAW;AAChC;AAMA,eAAsBE,EAAeC,GAAyB;AACxD,MAAA;AACF,UAAM,EAAE,UAAAP,GAAU,UAAAQ,GAAU,KAAAC,GAAK,WAAAC,GAAW,WAAAC,MAAcJ,GACpD,EAAE,UAAAK,GAAU,YAAAR,EAAe,IAAA,MAAMD,EAAgBH,CAAQ,GAIzDa,IAAc,OADJ,MAAMC,EAAmB,GACP,kBAAkB,OAAON,CAAQ,CAAC,GAC9DO,IAAU,MAAMC,EAAmBH,CAAW,GAC9CI,IAAgB,MAAMtB,EAAO,WAAWiB,EAAS,OAAO,GACxDM,IAAY,OAAOT,CAAG,GACtBU,IAAQ,MAAMJ,EAAQ,QAAQ,GAC9BK,IAAQ,MAAML,EAAQ,qCAAqCG,CAAS,IAAKG,EAAO,OAAO,IAAI,OAAOZ,CAAG;AAEvG,QAAAU,EAAM,WAAW;AACb,YAAA,IAAI,MAAM,yBAAyB;AAG3C,QAAIF,IAAgBG;AAClB,YAAM,IAAI,MAAM,oDAAoDH,CAAa,IAAIG,CAAI,EAAE;AAI7F,UAAME,IAAgBC,EAAW,MAAMA,EAAW,KAAK,KAAK,EAAE,GAAGA,EAAW,OAAO,KAAK,EAAE,CAAC;AAC3F,aAASC,IAAI,GAAGA,IAAIf,GAAKe,KAAK;AAC5B,YAAMC,IAAM,KAAK,MAAM,KAAK,OAAO,IAAI,GAAO,IAAI;AACpC,MAAAH,EAAA,IAAIE,GAAGC,CAAG;AAAA,IAAA;AAG1B,UAAMC,IAAW/B,EAAO,SAASiB,EAAS,OAAO;AAEjD,iBAAMG,EAAQ;AAAA,MACZH,EAAS,OAAOc,GAAUtB,EAAW,SAAS;AAAA,MAC9C;AAAA,QACE,OAAOgB;AAAA,MACT;AAAA,MACA;AAAA,QACE,QAAQ;AAAA,QACR,QAAQF;AAAA,QACR,eAAAI;AAAA,QACA,WAAWK,EAAQ,MAAMjB,CAAS;AAAA,QAClC,WAAWC,IAAYgB,EAAQ,MAAMhB,CAAS,IAAI;AAAA,MAAA;AAAA,IAEtD,GAEO,EAAE,SAAS,GAAK;AAAA,WAChBiB,GAAgB;AAChB,WAAA,EAAE,SAAS,IAAO,OAAOA,aAAiB,QAAQA,EAAM,UAAU,gBAAgB;AAAA,EAAA;AAE7F;"}