{"version":3,"file":"main.cjs","sources":["../src/types/index.ts","../src/index.ts"],"sourcesContent":["import type { Address } from \"@ton/core\";\n\nexport interface User {\n\tticketCnt: number;\n\tticketIds: number[];\n\tticketNumbers: number[];\n}\n\nexport interface WinTicket {\n\tnumber: number;\n\treward: string;\n\tid: number;\n}\n\nexport enum RoundStatus {\n\tOpen = \"Open\",\n\tClosed = \"Closed\",\n\tDrawn = \"Drawn\",\n}\n\nexport interface ITicket {\n\tid: number;\n\tnumbers: string;\n\tprizeAmount: number;\n\tmatched: number;\n}\n\nexport interface IUserData {\n\trefWallet: Address | null;\n\trefReward: number;\n\ttickets: ITicket[];\n}\n\nexport interface IRound {\n\tid: number;\n\tticketsSold: number;\n\tdrawTime: number;\n\tprice: number;\n\tstatus: RoundStatus;\n\tclaimable: boolean;\n\troundPot: string;\n\troundDraw: string;\n\tuserData: IUserData;\n}\n","import { type Address, Dictionary, type OpenedContract, address, fromNano, toNano } from '@ton/core';\nimport type TonConnect from '@tonconnect/sdk';\nimport type { Wallet } from '@tonconnect/sdk';\nimport { type IRound, type ITicket, RoundStatus } from './types';\nimport { TonConnectProvider, getFactoryInstance, getLotteryInstance, getRefWalletInstance } from './utils/factory';\nimport type { Lottery } from './utils/tact_Lottery';\nimport type { LotteryFactory } from './utils/tact_LotteryFactory';\nimport type { ReferralWallet } from './utils/tact_ReferralWallet';\n\nexport * from './types';\n\nlet factorySingleton: Promise<OpenedContract<LotteryFactory>>;\nlet refWalletSingleton: Promise<OpenedContract<ReferralWallet>>;\nlet lotterySingleton: Promise<OpenedContract<Lottery>>;\nlet lotterySingletonIdx = 0;\nlet tonconnectSingleton: TonConnectProvider;\n\n/**\n * Factory instance\n * @returns\n */\nasync function getFactory(): Promise<OpenedContract<LotteryFactory>> {\n  if (!factorySingleton) {\n    factorySingleton = getFactoryInstance();\n  }\n\n  return factorySingleton;\n}\n\n/**\n * Wallet ref instance\n * @param address\n * @returns\n */\nasync function getRefWallet(address: Address): Promise<OpenedContract<ReferralWallet>> {\n  if (!refWalletSingleton) {\n    refWalletSingleton = getRefWalletInstance(address);\n  }\n\n  return refWalletSingleton;\n}\n\n/**\n * Lottery instance\n * @param roundIdx\n * @returns\n */\nasync function getLottery(roundIdx: number): Promise<OpenedContract<Lottery>> {\n  if (!lotterySingleton || roundIdx !== lotterySingletonIdx) {\n    const factory = await getFactory();\n    const lotteryAddr = await factory.getLotteryAddress(BigInt(roundIdx));\n    lotterySingletonIdx = roundIdx;\n    lotterySingleton = getLotteryInstance(lotteryAddr);\n  }\n\n  return lotterySingleton;\n}\n\n/**\n * Sender instance\n * @param tonconnect\n * @returns\n */\nfunction getSender(tonconnect: TonConnect): TonConnectProvider {\n  if (!tonconnectSingleton) {\n    tonconnectSingleton = new TonConnectProvider(tonconnect);\n  }\n\n  return tonconnectSingleton;\n}\n\n/**\n * Add leading zeros to a number\n * @param number\n * @returns\n */\nfunction getReadableTicketNumber(number: number | bigint) {\n  const numbers = number.toString().split('').reverse();\n\n  if (numbers.length === 7) {\n    numbers.pop();\n  }\n\n  return numbers.join('').padStart(6, '0');\n}\n\n/**\n * Get the number of matching digits between a ticket and a draw\n * @param ticket\n * @param draw\n * @returns\n */\nfunction getTicketMatch(ticket: string, draw: string) {\n  let matched = 0;\n\n  for (let i = 0; i < 6; i++) {\n    if (ticket[i] === draw[i]) {\n      matched++;\n    } else {\n      break;\n    }\n  }\n\n  return matched;\n}\n\n/**\n * Returns last created round idx\n * @returns\n */\nexport const getLastRoundId = async () => {\n  const factory = await getFactory();\n  return Number(await factory.getLotteryCnt()) - 1;\n};\n\nfunction getRoundStatus(status: bigint): RoundStatus {\n  switch (status) {\n    case 0n:\n      return RoundStatus.Open;\n    case 1n:\n      return RoundStatus.Closed;\n    case 2n:\n      return RoundStatus.Drawn;\n    default:\n      throw new Error(`Unknown status: ${status}`);\n  }\n}\n\n/**\n * Get information about a specific round\n * @param roundIdx round number\n * @returns\n */\nexport const getRound = async (wallet: Wallet, roundIdx?: number): Promise<IRound> => {\n  if (roundIdx === undefined) {\n    roundIdx = await getLastRoundId();\n  }\n\n  const response: IRound = {\n    id: roundIdx,\n    ticketsSold: 0,\n    drawTime: 0,\n    price: 0,\n    status: RoundStatus.Open,\n    claimable: false,\n    roundPot: '0',\n    roundDraw: '',\n    userData: {\n      refReward: 0,\n      refWallet: null,\n      tickets: [],\n    },\n  };\n\n  const [factory, lottery] = await Promise.all([getFactory(), getLottery(roundIdx)]);\n  const walletAddress = address(wallet.account.address);\n  const [refNum, tickets, lotteryInfo, roundDraw, isClaimable] = await Promise.all([\n    factory.getReffererNumber(walletAddress).catch(() => 0),\n    lottery.getAllTickets(),\n    lottery.getInfo(),\n    lottery.getWinningNumber(),\n    lottery.getIsClaimable(walletAddress),\n  ]);\n\n  if (Number(refNum) > 0) {\n    // TODO: test it\n    const refAddress = await factory.getReferrerWalletAddress(walletAddress);\n    const ref = await getRefWallet(refAddress);\n\n    response.userData.refReward = Number(fromNano(await ref.getBalance()));\n    response.userData.refWallet = ref.address;\n  }\n\n  // Reverse back number\n  let roundDrawString = '';\n\n  if (roundDraw > 0) {\n    roundDrawString = getReadableTicketNumber(roundDraw);\n  }\n\n  for (let i = 0; i < tickets.size; i++) {\n    const ticket = tickets.get(BigInt(i));\n    const ticketString = getReadableTicketNumber(ticket?.number ?? 0);\n    const isMyTicket = ticket?.owner.equals(walletAddress);\n\n    if (isMyTicket) {\n      const matched = roundDrawString ? getTicketMatch(ticketString, roundDrawString) : 0;\n      const ticketData: ITicket = {\n        id: i,\n        numbers: ticketString,\n        prizeAmount: matched > 0 ? Number(fromNano(await lottery.getCalculateRewardsForTicketId(BigInt(i)))) : 0,\n        matched,\n      };\n\n      response.userData.tickets.push(ticketData);\n    }\n  }\n\n  const endTime = Number(lotteryInfo.endTime) * 1000;\n\n  response.ticketsSold = Number(fromNano(lotteryInfo.ticketCnt));\n  response.drawTime = endTime;\n  response.price = Number(fromNano(lotteryInfo.price));\n  response.status = getRoundStatus(lotteryInfo.status);\n  response.roundPot = Number(fromNano(lotteryInfo.amountCollected)).toFixed(2);\n  response.roundDraw = roundDrawString;\n  response.claimable = isClaimable;\n\n  return response;\n};\n\n/**\n * Create ref wallet address\n * @param tonConnect\n */\nexport const createReferralWallet = async (tonConnect: TonConnect | any) => {\n  const factory = await getFactory();\n  const sender = getSender(tonConnect);\n\n  await factory.send(\n    sender,\n    {\n      value: toNano('0.015'),\n    },\n    'createRefWallet'\n  );\n};\n\n/**\n * Withdraw\treferral rewards\n * @param tonConnect\n */\nexport const claimReferralReward = async (tonConnect: TonConnect) => {\n  const sender = getSender(tonConnect);\n  const factory = await getFactory();\n\n  await factory.send(\n    sender,\n    {\n      value: toNano('0.02'),\n    },\n    'withdraw_ref'\n  );\n};\n\n/**\n * Calculate the price of the tickets\n * @param roundIdx\n * @param qty\n * @returns\n */\nexport const getTicketsPrice = async (roundIdx: number, qty: number) => {\n  const lottery = await getLottery(roundIdx);\n  const cost = await lottery.getCalculateTotalPriceForBulkTickets(BigInt(qty));\n\n  return Number(fromNano(cost)).toFixed(2);\n};\n\n/**\n * Buy a ticket for lottery for transaction sender\n * @param tonConnect\n * @param roundIdx\n * @param qty\n * @param cost\n * @param refWallet\n * @returns\n */\nexport const buyTicket = async (\n  tonConnect: TonConnect | any,\n  roundIdx: number,\n  qty: number,\n  cost: number,\n  refWallet?: Address\n) => {\n  return _buyTicket(tonConnect, { roundIdx, qty, cost, refWallet });\n};\n\n/**\n * Buy a ticket for lottery not for transaction sender, for other wallet\n * @param tonConnect\n * @param roundIdx\n * @param qty\n * @param cost\n * @param recipient\n * @param refWallet\n * @returns\n */\nexport const buyTicketFor = async (\n  tonConnect: TonConnect | any,\n  roundIdx: number,\n  qty: number,\n  cost: number,\n  recipient: Address,\n  refWallet?: Address\n) => {\n  return _buyTicket(tonConnect, { roundIdx, qty, cost, refWallet, recipient });\n};\n\n/**\n * Claim winned tickets\n * @param tonConnect\n * @param roundIdx\n * @param winTicketsIds\n * @returns\n */\nexport const claimTickets = async (tonConnect: TonConnect | any, roundIdx: number, winTicketsIds: number[]) => {\n  const sender = new TonConnectProvider(tonConnect);\n\n  if (!sender.address) {\n    return;\n  }\n\n  const lottery = await getLottery(roundIdx);\n  const ticketIds: Dictionary<number, number> = Dictionary.empty();\n\n  for (let i = 0; i < winTicketsIds.length; i++) {\n    ticketIds.set(i, winTicketsIds[i]);\n  }\n\n  await lottery.send(\n    sender,\n    {\n      value: toNano('0.02') * BigInt(winTicketsIds.length),\n    },\n    {\n      $$type: 'ClaimTickets',\n      ticketIds,\n      ticketLength: BigInt(winTicketsIds.length),\n    }\n  );\n};\n\n/**\n * Claim round comission for the lottery\n * @requires admin\n * @param tonConnect\n * @param roundIdx\n */\nexport const claimPlatformComission = async (tonConnect: TonConnect | any, roundIdx: number) => {\n  const lottery = await getLottery(roundIdx);\n  const sender = getSender(tonConnect);\n\n  await lottery.send(\n    sender,\n    {\n      value: toNano('0.01'),\n    },\n    'widrawCommission'\n  );\n};\n\n/**\n * Create lottery round\n * @requires admin\n * @param tonConnect\n * @returns\n */\nexport const createRound = async (tonConnect: TonConnect | any) => {\n  const sender = getSender(tonConnect);\n\n  if (!sender.address) {\n    return;\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  const factory = await getFactory();\n  await factory.send(\n    sender,\n    {\n      value: toNano('0.05'),\n    },\n    {\n      $$type: 'CreateLottery',\n      endTime: BigInt(now + 3600 * 10),\n      price: toNano('0.02'),\n      discountDivisor: BigInt(400),\n      creator: sender.address,\n    }\n  );\n};\n\n/**\n * Close lottery round\n * @requires admin\n * @param tonConnect\n * @param roundIdx\n */\nexport const closeRound = async (tonConnect: TonConnect | any, roundIdx: number) => {\n  const lottery = await getLottery(roundIdx);\n  const sender = getSender(tonConnect);\n\n  await lottery.send(\n    sender,\n    {\n      value: toNano('0.01'),\n    },\n    'close'\n  );\n};\n\n/**\n * Initiate lottery draw\n * @requires admin\n * @param tonConnect\n * @param roundIdx\n */\nexport const drawRound = async (tonConnect: TonConnect | any, roundIdx: number) => {\n  const factory = await getFactory();\n  const sender = getSender(tonConnect);\n\n  await factory.send(\n    sender,\n    {\n      value: toNano('0.04'),\n    },\n    {\n      $$type: 'Draw',\n      lotteryId: BigInt(roundIdx),\n    }\n  );\n};\n\n/**\n * Move rount pot to the next round\n * @requires admin\n * @param tonConnect\n * @param roundIdx\n */\nexport const moveFunds = async (tonConnect: TonConnect | any, roundIdx: number) => {\n  const sender = getSender(tonConnect);\n  const lottery = await getLottery(roundIdx);\n\n  await lottery.send(\n    sender,\n    {\n      value: toNano('0.01'),\n    },\n    'moveFunds'\n  );\n};\n\ntype BuyTicketParams = {\n  roundIdx: number;\n  qty: number;\n  cost: number;\n  recipient?: Address;\n  refWallet?: Address;\n};\n\nasync function _buyTicket(tonConnect: TonConnect | any, params: BuyTicketParams) {\n  const sender = getSender(tonConnect);\n\n  if (!sender.address) {\n    return false;\n  }\n\n  const { roundIdx, qty, cost, refWallet = null, recipient = sender.address } = params;\n  const ticketNumbers: Dictionary<number, number> = Dictionary.empty();\n\n  for (let i = 0; i < qty; i++) {\n    const rnd = 1000000 * Math.random();\n    ticketNumbers.set(i, Number.parseInt(rnd.toString()) + 1000000);\n  }\n\n  const lottery = await getLottery(roundIdx);\n  const bigintQty = BigInt(qty);\n  await lottery.send(\n    sender,\n    {\n      value: toNano(cost) + toNano('0.004') * bigintQty,\n    },\n    {\n      $$type: 'BuyTicket',\n      amount: bigintQty,\n      ticketNumbers,\n      recipient,\n      refWallet,\n    }\n  );\n\n  return true;\n}\n"],"names":["RoundStatus","factorySingleton","refWalletSingleton","lotterySingleton","lotterySingletonIdx","tonconnectSingleton","getFactory","getFactoryInstance","getRefWallet","address","getRefWalletInstance","getLottery","roundIdx","lotteryAddr","getLotteryInstance","getSender","tonconnect","TonConnectProvider","getReadableTicketNumber","number","numbers","getTicketMatch","ticket","draw","matched","i","getLastRoundId","factory","getRoundStatus","status","getRound","wallet","response","lottery","walletAddress","refNum","tickets","lotteryInfo","roundDraw","isClaimable","refAddress","ref","fromNano","roundDrawString","ticketString","ticketData","endTime","createReferralWallet","tonConnect","sender","toNano","claimReferralReward","getTicketsPrice","qty","cost","buyTicket","refWallet","_buyTicket","buyTicketFor","recipient","claimTickets","winTicketsIds","ticketIds","Dictionary","claimPlatformComission","createRound","now","closeRound","drawRound","moveFunds","params","ticketNumbers","rnd","bigintQty"],"mappings":"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"}