{"version":3,"file":"node.cjs","sources":["../src/node.ts"],"sourcesContent":["import { TonClient, WalletContractV5R1 } from '@ton/ton';\nimport { Address, toNano, Dictionary } from '@ton/core';\nimport { TON_CLIENT_ENDPOINT, TON_CLIENT_API_KEY, IS_TESTNET } from './constants';\nimport { getFactoryInstance, getLotteryInstance } from './utils/factory';\nimport { mnemonicToPrivateKey } from '@ton/crypto';\n\nexport interface BuyTicketParams {\n  mnemonic: string;\n  roundIdx: number;\n  qty: number;\n  recipient: string;\n  refWallet?: string;\n}\n\n// Инициализация TON клиента\nconst client = new TonClient({\n  endpoint: TON_CLIENT_ENDPOINT,\n  apiKey: TON_CLIENT_API_KEY,\n});\n\n/**\n * Создание кошелька из мнемонической фразы\n * @param mnemonic\n */\nasync function getWalletFromMnemonic(mnemonic: string) {\n  const keyPair = await mnemonicToPrivateKey(mnemonic.split(' '));\n  return {\n    publicKey: keyPair.publicKey,\n    secretKey: keyPair.secretKey,\n  };\n}\n\n/**\n * Восстановление и вывод информации о кошельке\n * @param mnemonic\n */\nasync function restoreWalletV5(mnemonic: string) {\n  const walletKeys = await getWalletFromMnemonic(mnemonic);\n  const walletV5 = WalletContractV5R1.create({\n    publicKey: walletKeys.publicKey,\n    walletId: { networkGlobalId: IS_TESTNET ? -3 : 0 },\n  });\n\n  return { walletV5, walletKeys };\n}\n\n/**\n * Покупка билетов\n * @param params\n */\nexport async function buyTicketsNode(params: BuyTicketParams) {\n  try {\n    const { mnemonic, roundIdx, qty, recipient, refWallet } = params;\n    const { walletV5, walletKeys } = await restoreWalletV5(mnemonic);\n\n    // Получаем инстанс лотереи\n    const factory = await getFactoryInstance();\n    const lotteryAddr = await factory.getLotteryAddress(BigInt(roundIdx));\n    const lottery = await getLotteryInstance(lotteryAddr);\n    const walletBalance = await client.getBalance(walletV5.address);\n    const bigintQty = BigInt(qty);\n    const round = await lottery.getInfo();\n    const cost = (await lottery.getCalculateTotalPriceForBulkTickets(bigintQty)) + toNano('0.004') * BigInt(qty);\n\n    if (round.status !== 0n) {\n      throw new Error('The round is not active');\n    }\n\n    if (walletBalance < cost) {\n      throw new Error(`Insufficient balance to complete the transaction ${walletBalance} ${cost}`);\n    }\n\n    // Создаем словарь билетов\n    const ticketNumbers = Dictionary.empty(Dictionary.Keys.Uint(32), Dictionary.Values.Uint(32));\n    for (let i = 0; i < qty; i++) {\n      const rnd = Math.floor(Math.random() * 1000000) + 1000000;\n      ticketNumbers.set(i, rnd);\n    }\n\n    const provider = client.provider(walletV5.address);\n\n    await lottery.send(\n      walletV5.sender(provider, walletKeys.secretKey),\n      {\n        value: cost,\n      },\n      {\n        $$type: 'BuyTicket',\n        amount: bigintQty,\n        ticketNumbers,\n        recipient: Address.parse(recipient),\n        refWallet: refWallet ? Address.parse(refWallet) : null,\n      }\n    );\n\n    return { success: true };\n  } catch (error: unknown) {\n    return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };\n  }\n}\n"],"names":["client","TonClient","TON_CLIENT_ENDPOINT","TON_CLIENT_API_KEY","getWalletFromMnemonic","mnemonic","keyPair","mnemonicToPrivateKey","restoreWalletV5","walletKeys","WalletContractV5R1","buyTicketsNode","params","roundIdx","qty","recipient","refWallet","walletV5","lotteryAddr","getFactoryInstance","lottery","getLotteryInstance","walletBalance","bigintQty","round","cost","toNano","ticketNumbers","Dictionary","rnd","provider","Address","error"],"mappings":"+LAeMA,EAAS,IAAIC,EAAAA,UAAU,CAC3B,SAAUC,EAAA,oBACV,OAAQC,EAAAA,kBACV,CAAC,EAMD,eAAeC,EAAsBC,EAAkB,CACrD,MAAMC,EAAU,MAAMC,EAAA,qBAAqBF,EAAS,MAAM,GAAG,CAAC,EACvD,MAAA,CACL,UAAWC,EAAQ,UACnB,UAAWA,EAAQ,SACrB,CACF,CAMA,eAAeE,EAAgBH,EAAkB,CACzC,MAAAI,EAAa,MAAML,EAAsBC,CAAQ,EAMhD,MAAA,CAAE,SALQK,qBAAmB,OAAO,CACzC,UAAWD,EAAW,UACtB,SAAU,CAAE,gBAA8B,EAAO,CAAA,CAClD,EAEkB,WAAAA,CAAW,CAChC,CAMA,eAAsBE,EAAeC,EAAyB,CACxD,GAAA,CACF,KAAM,CAAE,SAAAP,EAAU,SAAAQ,EAAU,IAAAC,EAAK,UAAAC,EAAW,UAAAC,GAAcJ,EACpD,CAAE,SAAAK,EAAU,WAAAR,CAAe,EAAA,MAAMD,EAAgBH,CAAQ,EAIzDa,EAAc,MADJ,MAAMC,qBAAmB,GACP,kBAAkB,OAAON,CAAQ,CAAC,EAC9DO,EAAU,MAAMC,EAAA,mBAAmBH,CAAW,EAC9CI,EAAgB,MAAMtB,EAAO,WAAWiB,EAAS,OAAO,EACxDM,EAAY,OAAOT,CAAG,EACtBU,EAAQ,MAAMJ,EAAQ,QAAQ,EAC9BK,EAAQ,MAAML,EAAQ,qCAAqCG,CAAS,EAAKG,EAAAA,OAAO,OAAO,EAAI,OAAOZ,CAAG,EAEvG,GAAAU,EAAM,SAAW,GACb,MAAA,IAAI,MAAM,yBAAyB,EAG3C,GAAIF,EAAgBG,EAClB,MAAM,IAAI,MAAM,oDAAoDH,CAAa,IAAIG,CAAI,EAAE,EAI7F,MAAME,EAAgBC,EAAA,WAAW,MAAMA,EAAAA,WAAW,KAAK,KAAK,EAAE,EAAGA,EAAAA,WAAW,OAAO,KAAK,EAAE,CAAC,EAC3F,QAAS,EAAI,EAAG,EAAId,EAAK,IAAK,CAC5B,MAAMe,EAAM,KAAK,MAAM,KAAK,OAAO,EAAI,GAAO,EAAI,IACpCF,EAAA,IAAI,EAAGE,CAAG,CAAA,CAG1B,MAAMC,EAAW9B,EAAO,SAASiB,EAAS,OAAO,EAEjD,aAAMG,EAAQ,KACZH,EAAS,OAAOa,EAAUrB,EAAW,SAAS,EAC9C,CACE,MAAOgB,CACT,EACA,CACE,OAAQ,YACR,OAAQF,EACR,cAAAI,EACA,UAAWI,EAAAA,QAAQ,MAAMhB,CAAS,EAClC,UAAWC,EAAYe,EAAAA,QAAQ,MAAMf,CAAS,EAAI,IAAA,CAEtD,EAEO,CAAE,QAAS,EAAK,QAChBgB,EAAgB,CAChB,MAAA,CAAE,QAAS,GAAO,MAAOA,aAAiB,MAAQA,EAAM,QAAU,eAAgB,CAAA,CAE7F"}