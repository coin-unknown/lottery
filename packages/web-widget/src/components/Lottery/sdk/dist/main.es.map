{"version":3,"file":"main.es","sources":["../src/types/index.ts","../src/index.ts"],"sourcesContent":["import type { Address } from \"@ton/core\";\n\nexport interface User {\n\tticketCnt: number;\n\tticketIds: number[];\n\tticketNumbers: number[];\n}\n\nexport interface WinTicket {\n\tnumber: number;\n\treward: string;\n\tid: number;\n}\n\nexport enum RoundStatus {\n\tOpen = \"Open\",\n\tClosed = \"Closed\",\n\tDrawn = \"Drawn\",\n}\n\nexport interface ITicket {\n\tid: number;\n\tnumbers: string;\n\tprizeAmount: number;\n\tmatched: number;\n}\n\nexport interface IUserData {\n\trefWallet: Address | null;\n\trefReward: number;\n\ttickets: ITicket[];\n}\n\nexport interface IRound {\n\tid: number;\n\tticketsSold: number;\n\tdrawTime: number;\n\tprice: number;\n\tstatus: RoundStatus;\n\tclaimable: boolean;\n\troundPot: string;\n\troundDraw: string;\n\tuserData: IUserData;\n}\n","import { type Address, Dictionary, type OpenedContract, address, fromNano, toNano } from '@ton/core';\nimport type TonConnect from '@tonconnect/sdk';\nimport type { Wallet } from '@tonconnect/sdk';\nimport { type IRound, type ITicket, RoundStatus } from './types';\nimport { TonConnectProvider, getFactoryInstance, getLotteryInstance, getRefWalletInstance } from './utils/factory';\nimport type { Lottery } from './utils/tact_Lottery';\nimport type { LotteryFactory } from './utils/tact_LotteryFactory';\nimport type { ReferralWallet } from './utils/tact_ReferralWallet';\n\nexport * from './types';\n\nlet factorySingleton: Promise<OpenedContract<LotteryFactory>>;\nlet refWalletSingleton: Promise<OpenedContract<ReferralWallet>>;\nlet lotterySingleton: Promise<OpenedContract<Lottery>>;\nlet lotterySingletonIdx = 0;\nlet tonconnectSingleton: TonConnectProvider;\n\n/**\n * Factory instance\n * @returns\n */\nasync function getFactory(): Promise<OpenedContract<LotteryFactory>> {\n  if (!factorySingleton) {\n    factorySingleton = getFactoryInstance();\n  }\n\n  return factorySingleton;\n}\n\n/**\n * Wallet ref instance\n * @param address\n * @returns\n */\nasync function getRefWallet(address: Address): Promise<OpenedContract<ReferralWallet>> {\n  if (!refWalletSingleton) {\n    refWalletSingleton = getRefWalletInstance(address);\n  }\n\n  return refWalletSingleton;\n}\n\n/**\n * Lottery instance\n * @param roundIdx\n * @returns\n */\nasync function getLottery(roundIdx: number): Promise<OpenedContract<Lottery>> {\n  if (!lotterySingleton || roundIdx !== lotterySingletonIdx) {\n    const factory = await getFactory();\n    const lotteryAddr = await factory.getLotteryAddress(BigInt(roundIdx));\n    lotterySingletonIdx = roundIdx;\n    lotterySingleton = getLotteryInstance(lotteryAddr);\n  }\n\n  return lotterySingleton;\n}\n\n/**\n * Sender instance\n * @param tonconnect\n * @returns\n */\nfunction getSender(tonconnect: TonConnect): TonConnectProvider {\n  if (!tonconnectSingleton) {\n    tonconnectSingleton = new TonConnectProvider(tonconnect);\n  }\n\n  return tonconnectSingleton;\n}\n\n/**\n * Add leading zeros to a number\n * @param number\n * @returns\n */\nfunction getReadableTicketNumber(number: number | bigint) {\n  const numbers = number.toString().split('').reverse();\n\n  if (numbers.length === 7) {\n    numbers.pop();\n  }\n\n  return numbers.join('').padStart(6, '0');\n}\n\n/**\n * Get the number of matching digits between a ticket and a draw\n * @param ticket\n * @param draw\n * @returns\n */\nfunction getTicketMatch(ticket: string, draw: string) {\n  let matched = 0;\n\n  for (let i = 0; i < 6; i++) {\n    if (ticket[i] === draw[i]) {\n      matched++;\n    } else {\n      break;\n    }\n  }\n\n  return matched;\n}\n\n/**\n * Returns last created round idx\n * @returns\n */\nexport const getLastRoundId = async () => {\n  const factory = await getFactory();\n  return Number(await factory.getLotteryCnt()) - 1;\n};\n\nfunction getRoundStatus(status: bigint): RoundStatus {\n  switch (status) {\n    case 0n:\n      return RoundStatus.Open;\n    case 1n:\n      return RoundStatus.Closed;\n    case 2n:\n      return RoundStatus.Drawn;\n    default:\n      throw new Error(`Unknown status: ${status}`);\n  }\n}\n\n/**\n * Get information about a specific round\n * @param roundIdx round number\n * @returns\n */\nexport const getRound = async (wallet: Wallet, roundIdx?: number): Promise<IRound> => {\n  if (roundIdx === undefined) {\n    roundIdx = await getLastRoundId();\n  }\n\n  const response: IRound = {\n    id: roundIdx,\n    ticketsSold: 0,\n    drawTime: 0,\n    price: 0,\n    status: RoundStatus.Open,\n    claimable: false,\n    roundPot: '0',\n    roundDraw: '',\n    userData: {\n      refReward: 0,\n      refWallet: null,\n      tickets: [],\n    },\n  };\n\n  const [factory, lottery] = await Promise.all([getFactory(), getLottery(roundIdx)]);\n  const walletAddress = address(wallet.account.address);\n  const [refNum, tickets, lotteryInfo, roundDraw, isClaimable] = await Promise.all([\n    factory.getReffererNumber(walletAddress).catch(() => 0),\n    lottery.getAllTickets(),\n    lottery.getInfo(),\n    lottery.getWinningNumber(),\n    lottery.getIsClaimable(walletAddress),\n  ]);\n\n  if (Number(refNum) > 0) {\n    // TODO: test it\n    const refAddress = await factory.getReferrerWalletAddress(walletAddress);\n    const ref = await getRefWallet(refAddress);\n\n    response.userData.refReward = Number(fromNano(await ref.getBalance()));\n    response.userData.refWallet = ref.address;\n  }\n\n  // Reverse back number\n  let roundDrawString = '';\n\n  if (roundDraw > 0) {\n    roundDrawString = getReadableTicketNumber(roundDraw);\n  }\n\n  for (let i = 0; i < tickets.size; i++) {\n    const ticket = tickets.get(BigInt(i));\n    const ticketString = getReadableTicketNumber(ticket?.number ?? 0);\n    const isMyTicket = ticket?.owner.equals(walletAddress);\n\n    if (isMyTicket) {\n      const matched = roundDrawString ? getTicketMatch(ticketString, roundDrawString) : 0;\n      const ticketData: ITicket = {\n        id: i,\n        numbers: ticketString,\n        prizeAmount: matched > 0 ? Number(fromNano(await lottery.getCalculateRewardsForTicketId(BigInt(i)))) : 0,\n        matched,\n      };\n\n      response.userData.tickets.push(ticketData);\n    }\n  }\n\n  const endTime = Number(lotteryInfo.endTime) * 1000;\n\n  response.ticketsSold = Number(fromNano(lotteryInfo.ticketCnt));\n  response.drawTime = endTime;\n  response.price = Number(fromNano(lotteryInfo.price));\n  response.status = getRoundStatus(lotteryInfo.status);\n  response.roundPot = Number(fromNano(lotteryInfo.amountCollected)).toFixed(2);\n  response.roundDraw = roundDrawString;\n  response.claimable = isClaimable;\n\n  return response;\n};\n\n/**\n * Create ref wallet address\n * @param tonConnect\n */\nexport const createReferralWallet = async (tonConnect: TonConnect | any) => {\n  const factory = await getFactory();\n  const sender = getSender(tonConnect);\n\n  await factory.send(\n    sender,\n    {\n      value: toNano('0.015'),\n    },\n    'createRefWallet'\n  );\n};\n\n/**\n * Withdraw\treferral rewards\n * @param tonConnect\n */\nexport const claimReferralReward = async (tonConnect: TonConnect) => {\n  const sender = getSender(tonConnect);\n  const factory = await getFactory();\n\n  await factory.send(\n    sender,\n    {\n      value: toNano('0.02'),\n    },\n    'withdraw_ref'\n  );\n};\n\n/**\n * Calculate the price of the tickets\n * @param roundIdx\n * @param qty\n * @returns\n */\nexport const getTicketsPrice = async (roundIdx: number, qty: number) => {\n  const lottery = await getLottery(roundIdx);\n  const cost = await lottery.getCalculateTotalPriceForBulkTickets(BigInt(qty));\n\n  return Number(fromNano(cost)).toFixed(2);\n};\n\n/**\n * Buy a ticket for lottery for transaction sender\n * @param tonConnect\n * @param roundIdx\n * @param qty\n * @param cost\n * @param refWallet\n * @returns\n */\nexport const buyTicket = async (\n  tonConnect: TonConnect | any,\n  roundIdx: number,\n  qty: number,\n  cost: number,\n  refWallet?: Address\n) => {\n  return _buyTicket(tonConnect, { roundIdx, qty, cost, refWallet });\n};\n\n/**\n * Buy a ticket for lottery not for transaction sender, for other wallet\n * @param tonConnect\n * @param roundIdx\n * @param qty\n * @param cost\n * @param recipient\n * @param refWallet\n * @returns\n */\nexport const buyTicketFor = async (\n  tonConnect: TonConnect | any,\n  roundIdx: number,\n  qty: number,\n  cost: number,\n  recipient: Address,\n  refWallet?: Address\n) => {\n  return _buyTicket(tonConnect, { roundIdx, qty, cost, refWallet, recipient });\n};\n\n/**\n * Claim winned tickets\n * @param tonConnect\n * @param roundIdx\n * @param winTicketsIds\n * @returns\n */\nexport const claimTickets = async (tonConnect: TonConnect | any, roundIdx: number, winTicketsIds: number[]) => {\n  const sender = new TonConnectProvider(tonConnect);\n\n  if (!sender.address) {\n    return;\n  }\n\n  const lottery = await getLottery(roundIdx);\n  const ticketIds: Dictionary<number, number> = Dictionary.empty();\n\n  for (let i = 0; i < winTicketsIds.length; i++) {\n    ticketIds.set(i, winTicketsIds[i]);\n  }\n\n  await lottery.send(\n    sender,\n    {\n      value: toNano('0.02') * BigInt(winTicketsIds.length),\n    },\n    {\n      $$type: 'ClaimTickets',\n      ticketIds,\n      ticketLength: BigInt(winTicketsIds.length),\n    }\n  );\n};\n\n/**\n * Claim round comission for the lottery\n * @requires admin\n * @param tonConnect\n * @param roundIdx\n */\nexport const claimPlatformComission = async (tonConnect: TonConnect | any, roundIdx: number) => {\n  const lottery = await getLottery(roundIdx);\n  const sender = getSender(tonConnect);\n\n  await lottery.send(\n    sender,\n    {\n      value: toNano('0.01'),\n    },\n    'widrawCommission'\n  );\n};\n\n/**\n * Create lottery round\n * @requires admin\n * @param tonConnect\n * @returns\n */\nexport const createRound = async (tonConnect: TonConnect | any) => {\n  const sender = getSender(tonConnect);\n\n  if (!sender.address) {\n    return;\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  const factory = await getFactory();\n  await factory.send(\n    sender,\n    {\n      value: toNano('0.05'),\n    },\n    {\n      $$type: 'CreateLottery',\n      endTime: BigInt(now + 3600 * 10),\n      price: toNano('0.02'),\n      discountDivisor: BigInt(400),\n      creator: sender.address,\n    }\n  );\n};\n\n/**\n * Close lottery round\n * @requires admin\n * @param tonConnect\n * @param roundIdx\n */\nexport const closeRound = async (tonConnect: TonConnect | any, roundIdx: number) => {\n  const lottery = await getLottery(roundIdx);\n  const sender = getSender(tonConnect);\n\n  await lottery.send(\n    sender,\n    {\n      value: toNano('0.01'),\n    },\n    'close'\n  );\n};\n\n/**\n * Initiate lottery draw\n * @requires admin\n * @param tonConnect\n * @param roundIdx\n */\nexport const drawRound = async (tonConnect: TonConnect | any, roundIdx: number) => {\n  const factory = await getFactory();\n  const sender = getSender(tonConnect);\n\n  await factory.send(\n    sender,\n    {\n      value: toNano('0.04'),\n    },\n    {\n      $$type: 'Draw',\n      lotteryId: BigInt(roundIdx),\n    }\n  );\n};\n\n/**\n * Move rount pot to the next round\n * @requires admin\n * @param tonConnect\n * @param roundIdx\n */\nexport const moveFunds = async (tonConnect: TonConnect | any, roundIdx: number) => {\n  const sender = getSender(tonConnect);\n  const lottery = await getLottery(roundIdx);\n\n  await lottery.send(\n    sender,\n    {\n      value: toNano('0.01'),\n    },\n    'moveFunds'\n  );\n};\n\ntype BuyTicketParams = {\n  roundIdx: number;\n  qty: number;\n  cost: number;\n  recipient?: Address;\n  refWallet?: Address;\n};\n\nasync function _buyTicket(tonConnect: TonConnect | any, params: BuyTicketParams) {\n  const sender = getSender(tonConnect);\n\n  if (!sender.address) {\n    return false;\n  }\n\n  const { roundIdx, qty, cost, refWallet = null, recipient = sender.address } = params;\n  const ticketNumbers: Dictionary<number, number> = Dictionary.empty();\n\n  for (let i = 0; i < qty; i++) {\n    const rnd = 1000000 * Math.random();\n    ticketNumbers.set(i, Number.parseInt(rnd.toString()) + 1000000);\n  }\n\n  const lottery = await getLottery(roundIdx);\n  const bigintQty = BigInt(qty);\n  await lottery.send(\n    sender,\n    {\n      value: toNano(cost) + toNano('0.004') * bigintQty,\n    },\n    {\n      $$type: 'BuyTicket',\n      amount: bigintQty,\n      ticketNumbers,\n      recipient,\n      refWallet,\n    }\n  );\n\n  return true;\n}\n"],"names":["RoundStatus","factorySingleton","refWalletSingleton","lotterySingleton","lotterySingletonIdx","tonconnectSingleton","getFactory","getFactoryInstance","getRefWallet","address","getRefWalletInstance","getLottery","roundIdx","lotteryAddr","getLotteryInstance","getSender","tonconnect","TonConnectProvider","getReadableTicketNumber","number","numbers","getTicketMatch","ticket","draw","matched","i","getLastRoundId","factory","getRoundStatus","status","getRound","wallet","response","lottery","walletAddress","refNum","tickets","lotteryInfo","roundDraw","isClaimable","refAddress","ref","fromNano","roundDrawString","ticketString","ticketData","endTime","createReferralWallet","tonConnect","sender","toNano","claimReferralReward","getTicketsPrice","qty","cost","buyTicket","refWallet","_buyTicket","buyTicketFor","recipient","claimTickets","winTicketsIds","ticketIds","Dictionary","claimPlatformComission","createRound","now","closeRound","drawRound","moveFunds","params","ticketNumbers","rnd","bigintQty"],"mappings":"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"}